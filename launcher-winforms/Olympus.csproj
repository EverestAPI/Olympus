<Project Sdk="Microsoft.NET.Sdk.WindowsDesktop">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net452</TargetFramework>
    <RootNamespace>Olympus</RootNamespace>
    <UseWindowsForms>true</UseWindowsForms>
    <ApplicationIcon>icon.ico</ApplicationIcon>
    <NoWin32Manifest>true</NoWin32Manifest>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="icon.ico" />
    <None Remove="logo.png" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="icon.ico" />
    <EmbeddedResource Include="logo.png" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.0" PrivateAssets="all" />
    <PackageReference Include="MonoMod.Utils" Version="20.11.26.2" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="System.IO.Compression" />
  </ItemGroup>
  
  <!-- The following is based off of the ILRepacking work done for Harmony. -->

  <!-- ILRepack config needs to be specified before MonoMod.Common PackageReference due its dependency on properties defined here. -->
  <Choose>
    <When Condition="'$(Configuration)'=='Release'">
      <PropertyGroup>
        <ILRepackInternalize>true</ILRepackInternalize>
      </PropertyGroup>
      <Choose>
        <!-- See ExecILRepack target below. -->
        <When Condition="$([System.Environment]::GetEnvironmentVariable('DYLD_FALLBACK_LIBRARY_PATH'))=='' And $([MSBuild]::IsOsPlatform('OSX'))">
          <PropertyGroup>
            <DoILRepack>false</DoILRepack>
            <DoExecILRepack>true</DoExecILRepack>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
            <DoILRepack>true</DoILRepack>
            <DoExecILRepack>false</DoExecILRepack>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ILRepackInternalize>false</ILRepackInternalize>
        <DoILRepack>false</DoILRepack>
        <DoExecILRepack>false</DoExecILRepack>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <!-- 2.1.14 is the last consistently working cross-plat version. -->
    <PackageReference Include="ILRepack.Lib.MSBuild" Version="2.1.14" PrivateAssets="all" />
  </ItemGroup>

  <!--
	On macOS .NET Framework builds, ILRepack uses Mono.Posix package for copying file permissions, but this problematic because:
	1) Its P/Invoke usage relies on dynamic linking with the native libs (specifically, libMonoPosixHelper.dylib) of the Mono install(s),
		(which are typically rooted at /Library/Frameworks/Mono.framework).
	2) Mono.Posix.dll's dynamic linking doesn't specify absolute paths, so it relies on DYLD_* environment variables for searching for the dylib.
	3) However, these DYLD_* environment variables are often unset in modern macOS due to SIP:
		https://developer.apple.com/library/archive/documentation/Security/Conceptual/System_Integrity_Protection_Guide/RuntimeProtections/RuntimeProtections.html
	This results in "Unable to load shared library 'MonoPosixHelper' ... at Mono.Unix.Native.Syscall.stat..." errors.
	Workaround:
	We default DYLD_FALLBACK_LIBRARY_PATH to what's supposed to be its default value, prepended by Mono's lib folder.
	However, dyld already initializes and reads DYLD_* env vars before any target is run (even before InitialTargets targets),
	so we must spawn a new process via the Exec task that sets DYLD_* env vars and runs msbuild on the ILRepack target.
	Furthermore, DYLD_* env vars aren't inherited (even if specified via Exec's EnvironmentVariables attribute), probably due to SIP,
	so we must set DYLD_* env vars within the Exec'd command itself.
	-->
  <Target Name="ExecILRepack" AfterTargets="PostBuildEvent" Condition="$(DoExecILRepack)">
    <PropertyGroup>
      <DYLD_FALLBACK_LIBRARY_PATH>/Library/Frameworks/Mono.framework/Versions/Current/lib:$(HOME)/lib:/usr/local/lib:/lib:/usr/lib</DYLD_FALLBACK_LIBRARY_PATH>
      <MSBuildCmd Condition="'$(MSBuildRuntimeType)'!='Core'">"$(MSBuildToolsPath)\MSBuild.exe"</MSBuildCmd>
      <MSBuildCmd Condition="'$(MSBuildRuntimeType)'=='Core'">"$(DOTNET_HOST_PATH)" msbuild</MSBuildCmd>
      <MSBuildCmdArgs>"-p:TargetFramework=$(TargetFramework);Configuration=$(Configuration);DoILRepack=true" -t:ILRepack</MSBuildCmdArgs>
    </PropertyGroup>
    <Exec Command="export DYLD_FALLBACK_LIBRARY_PATH=$(DYLD_FALLBACK_LIBRARY_PATH); $(MSBuildCmd) $(MSBuildCmdArgs)" />
  </Target>

</Project>